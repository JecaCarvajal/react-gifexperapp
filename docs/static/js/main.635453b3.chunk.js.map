{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GitGrid.js","hooks/useFetchGifts.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","protoTypeS","PropTypes","func","isRequired","getGits","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GitGrid","loading","state","setState","useEffect","then","imgs","useFecthGifs","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAIaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVU,SAAEC,GAClBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SACE,uBACCO,KAAK,OACLC,MAAOT,EACPU,SAlBmB,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,aAuB/BZ,EAAYe,WAAa,CACrBd,cAAgBe,IAAUC,KAAKC,Y,mCChCtBC,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAErC,OADAc,QAAQC,IAAI,CAACN,KAAIC,QAAOV,QAEpB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAKA,QCDJS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAItB,ECPwB,SAAEA,GAE1B,MAA0BlB,mBAAS,CAC/ByB,KAAK,GACLe,SAAU,IAFd,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACN1B,EAAUC,GACR0B,MAAO,SAAAC,GACJH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAInB,CAACtB,IAEGuB,EDXyBK,CAAa5B,GAAhCa,EAAb,EAAQN,KAAae,EAArB,EAAqBA,QAQrB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAoDlB,IACnDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAYZ,qBAAKA,UAAU,YAAf,SAGGL,EAAOJ,KAAM,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEIA,GADEA,EAAIC,aElCZkB,EAAe,WAIxB,MAAoC/C,mBAAS,CAAC,gBAA9C,mBAAOgD,EAAP,KAAmBjD,EAAnB,KAOA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACD,6BAKKiD,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAYA,GADLA,Y,MCtB/B+B,IAASC,OACL,cAAE,EAAF,IACFC,SAASC,eAAe,W","file":"static/js/main.635453b3.chunk.js","sourcesContent":["//rafc\r\nimport React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleInputChange = ( e ) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSumit = ( e ) => {\r\n        e.preventDefault();\r\n        if ( inputValue.trim().length > 2){\r\n            setCategories( cats => [ inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n       \r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSumit}>\r\n          <input\r\n           type=\"text\"\r\n           value={inputValue}\r\n           onChange={ handleInputChange}\r\n          ></input>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.protoTypeS = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n","export const getGits = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=6KQCypyTSwrazeeLQvllA58qkO6NKZXv`;\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url}) => {\r\n    console.log({id, title, url});\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {} from 'react'\r\nimport { useFecthGifs } from '../hooks/useFetchGifts'\r\n//import React, {useState, useEffect} from 'react'\r\n//import { getGits } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GitGrid = ( {category }) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n    // Utilizar un custom hook, que son no mas que funciones\r\n    const { data:images, loading} = useFecthGifs(category);\r\n     \r\n    // useEffect(() => {\r\n    //     getGits(category).then(imgs => setImages(imgs))\r\n    // },[category])   \r\n\r\n    // getGits();\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__bounce\">{ category }</h3>\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n        {/* <div className=\"card-grid\"> \r\n       \r\n\r\n                {\r\n                    images.map ( img => (\r\n                        <GifGridItem \r\n                        key={ img.id}\r\n                        {...img} />\r\n                    ))\r\n                }\r\n        </div> */}\r\n        <div className=\"card-grid\">       \r\n\r\n       {\r\n           images.map ( img => (\r\n               <GifGridItem \r\n               key={ img.id}\r\n               {...img} />\r\n           ))\r\n       }\r\n        </div>\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport {getGits} from '../helpers/getGifs';\r\n\r\nexport const useFecthGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading : true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGits ( category)\r\n         .then ( imgs => {\r\n             setState({\r\n                 data: imgs,\r\n                 loading: false\r\n             })\r\n         })       \r\n       \r\n    }, [category])\r\n\r\n    return state;\r\n}","import React, { useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GitGrid } from './components/GitGrid';\r\n\r\nexport const GitExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n\r\n    const [categories, setCategories] = useState(['Dragon Ball']);\r\n\r\n    // const handleAdd = () => {\r\n    //     //setCategories(...categories, 'HunterXHunter');\r\n    //     setCategories(cats => [...cats, 'HunterXHunter'])\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GitExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n           <ol>\r\n              {\r\n                //  categories.map( category => {\r\n                //      return <li key={category}> {category}</li>\r\n                //  }) \r\n                categories.map( category => \r\n                    <GitGrid \r\n                        key = {category}\r\n                        category = {category} />\r\n                )\r\n              }\r\n           </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GitExpertApp } from './GitExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    < GitExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}